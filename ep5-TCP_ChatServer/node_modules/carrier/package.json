{
  "name": "carrier",
  "description": "Evented stream line reader for node.js",
  "version": "0.1.7",
  "homepage": "http://github.com/pgte/carrier",
  "author": {
    "name": "Pedro Teixeira",
    "email": "pedro.teixeira@gmail.com"
  },
  "contributors": [
    {
      "name": "Pedro Teixeira",
      "email": "pedro.teixeira@gmail.com"
    },
    {
      "name": "StÃ©phan Kochen",
      "email": "stephan@kochen.nl"
    },
    {
      "name": "Patrick Georgi",
      "url": "https://github.com/pgeorgi"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/pgte/carrier.git"
  },
  "bugs": {
    "mail": "pedro.teixeira@gmail.com",
    "url": "http://github.com/pgte/carrier/issues"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">=0.3.0"
  },
  "devDependencies": {
    "tap": "0.2"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "main": "./lib/carrier.js",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/pgte/carrier/raw/master/LICENSE"
    }
  ],
  "readme": "Carrier helps you implement new-line terminated protocols over node.js.\n\nThe client can send you chunks of lines and carrier will only notify you on each completed line.\n\n## Install\n\n    $ npm install carrier\n    \n## Usage\n\n    var net     = require('net'),\n        carrier = require('carrier');\n\n    var server = net.createServer(function(conn) {\n      carrier.carry(conn, function(line) {\n        console.log('got one line: ' + line);\n      });\n    });\n    server.listen(4001);\n\n  \nOr, you can also listen to the \"line\" event on the returned object of carrier.carry() like this:\n\n    var net     = require('net'),\n        carrier = require('carrier');\n\n    var server = net.createServer(function(conn) {\n      var my_carrier = carrier.carry(conn);\n      my_carrier.on('line',  function(line) {\n        console.log('got one line: ' + line);\n      });\n    });\n    server.listen(4001);\n\ncarrier.carry accepts the following options:\n\n    carrier.carry(reader, listener, encoding, separator)\n\n* reader: the stream reader\n* listener: a \"line\" event listener function\n* encoding: what encoding to assume. Default: \"utf8\"\n* separator: what line separator to use. Default: /\\r?\\n/\n\nAll are optional except for the first.",
  "_id": "carrier@0.1.7",
  "dist": {
    "shasum": "06403c2918ee460a350876b60c846b61428231e6"
  },
  "_from": "carrier"
}
